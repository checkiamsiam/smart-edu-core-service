generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  students            Student[]
  faculties           Faculty[]
  academicDepartments AcademicDepartment[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String          @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  students          Student[]
  faculties         Faculty[]
  offeredCourses     OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String   @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  email        String   @unique
  contactNo    String   @unique
  gender       String
  bloodGroup   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicSemesterId String
  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String   @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  email        String   @unique
  contactNo    String   @unique
  gender       String
  bloodGroup   String?
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  courses           CourseFaculty[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String

  @@unique([roomNumber, buildingId])
  @@map("rooms")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequisite    CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  faculties       CourseFaculty[]
  OfferedCourse   OfferedCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                   String                      @id @default(uuid())
  startDate            DateTime
  endDate              DateTime
  status               SemesterRegistrationStatus? @default(upcoming)
  minCredit            Int                         @default(0)
  maxCredit            Int                         @default(0)
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  academicSemesterId   String
  academicSemester     AcademicSemester            @relation(fields: [academicSemesterId], references: [id])
  offeredCourses        OfferedCourse[]
  offeredCourseSections OfferedCourseSection[]

  @@map("semester_registrations")
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections  OfferedCourseSection[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String        @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int           @default(0)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  offeredCourseId          String
  offeredCourse            OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("offered_course_sections")
}

enum SemesterRegistrationStatus {
  upcoming
  ongoing
  ended
}
